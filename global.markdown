# 后端项目约束草案

## 项目命名

### 约定原则

*应当*采用通俗易懂的单词词组进行命名，同时方便兼容数据库命名和URL域级命名

### 约定规则

[项目代号] + [项目全称] + [项目简称] + [工程名]

#### 项目代号

用来代指项目名称，同时在数据库命名阶段时作为前缀命名

##### 建议

采用一组相似类型的中文/英文名称，如十二生肖、北欧神话中众神的名字等

##### 重复原则

项目代号应当在同类型组命名资源耗尽时进行更换，不应当与历史项目代号命名集合中的任何一个命名重复

#### 项目全称

项目的正式名称，*必须*完整详细地表明该项目的服务目标和使用目的。

##### 全称命名

{(项目服务目标) + [项目使用目的 | 项目通俗名] + (项目类型) + [项目分隔符]}+

##### 项目分隔符

当A1项目属于之前A项目的一个子项目时，允许使用`-`进行分隔

##### 项目通俗名

属于约定俗成， 如"小帮手"等命名，在此列出：

1. 小帮手
2. 掌上重邮

##### 建议

eg. 校级团委组织报名管理系统

eg. 重邮小帮手 - XXX

#### 项目简称

项目的简略名称，用以在其他命名阶段

##### 建议

尽量使用“项目使用目的”或者"项目通俗名"的全称英译**名词**，*不应当*使用太过复杂的单词。

不推荐但允许使用“项目使用目的”或者“项目通俗名”的全称**拼音简写**，*当且仅当*对应的英译**名词**过长（超过20位字母）或者过于复杂

#### 工程名

项目工程代号

##### 工程命名

[版本阶段] : (英译大写) + .s + [工程开始日期] : (Ymd) + .V + [(修正)版本号] + | +  [原始工程号]

##### 修正工程名

当出现周期换代更新时（一般换届后出现），将初始项目工程号附在 `|` 之后，提供一个回溯查询

##### 建议

eg. BETA.s20151002.V2.3.5

eg. ALPHA.s20160109.V1.0.0|STABLE.s20120506.V9.8.7

### 约定样例

待补充...

## 数据库管理

### 数据库命名

#### 约定原则

##### 通常

- 库名、表名、字段名*必须*使用小写字母，并*允许*且**仅允许**采用下划线连接
- 库名、表名*禁止*超过24个字符
- 字段名*禁止*超过32个字符
- 表名、 字段名不得使用其相应数据库环境的保留字
- 表名、字段名*必须*要贴近设计用意，具有见名之意

##### 备份

使用 ['backup\_'|'bak\_'] +  [备份表名|备份数据库名] : (小写) + '_' + [备份日期] : (Ymd)

##### 库

使用 [项目代号] : (小写) + '_' + [项目简称] : (小写) 进行命名

所有库*应当*使用`INNODB`存储引擎

##### 表

使用 [模块前缀] : (小写)+ [表主题] : (小写)

- 模块前缀：不应超过5个字符，可采用项目简称或另取
- 表主题：应符合该表所有字段维护的相关主题内容

所有表要求*至少*使用`utf8-general-ci`，*至多*可使用`utf8mb4-unicode-ci`

##### 字段

- 主键命名：id
- 引用父键命名：ppid
- 外键命名：[外键表名] + '_' + [外键字段名]
- 普通命名：[字段含义] + '_' + [字段属性] : (i|f)

所有字段*必须*添加注释，要求能够完整表述该字段的设计意图和使用含义

所有字段*必须*定义为 `NOT NULL`

关于字段类型一些建议：

1. 尽量不使用 `TEXT`、`BLOB` 类型
2. 使用 `DECIMAL` 存储浮点数
3. 使用 `TINYINT` 存储枚举值
4. 不使用 `CHAR` 类型存储可变长度字符串
5. 如果字段值均为非负整数，则*应当*使用 `UNSIGNED` 类型
6. 如果可行，*应当*使用 `timestamp`存储时间
7. 待补充...

关于字段设计一些建议：

1. 有限值集合应使用 `ENUM` 或者 `TINYINT`，如性别等字段
2. 可变长度密文字符串*可以*使用 `VARBINARY` 类型
3. 所有**密文**字段*禁止*明文存储

##### 索引

建议如果在表设计阶段考虑到字段需要使用索引，*可以*设置字段属性为 i

### 索引管理

相关知识需要补充...

### SQL语句

- *可以*但**不推荐**使用存储过程、触发器
- *可以*但**不推荐**使用超过3个表的 `JOIN` 查询
- *不应当*在SQL语句中进行过多的数学运算
- *可以*但*不应当*无意义的使用 `SELECT *` 查询，**推荐**使用 `SELECT [useful-keys]` 查询逻辑有效信息
- *禁止*使用 `ORDER BY RAND()`
- *禁止*单SQL同时更新多表

### 事务处理

## 版本管理

### 文档版本管理

#### 需求分析

待补充...

#### 产品原型

待补充...

#### 设计图

待补充...

#### 数据库设计

#### 类设计

#### 接口文档

#### 代码注释

#### 使用文档

[1]: http://example.com "reference project named"
[2]: http://semver.org/lang/zh-CN "语义化版本2.0.0"